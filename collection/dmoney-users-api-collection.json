{
	"info": {
		"_postman_id": "2a262cf0-1b90-41d6-bdd2-1a478e679a87",
		"name": "dmoney-trnx-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44303613",
		"_collection_link": "https://sadiasobhana.postman.co/workspace/Sadia-Sobhana's-Workspace~df36cbb0-ac87-439f-8ee6-ab8d500b3ece/collection/44303613-2a262cf0-1b90-41d6-bdd2-1a478e679a87?action=share&source=collection_link&creator=44303613"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonresponse = pm.response.json();\r",
									"console.log(jsonresponse.token) \r",
									"pm.collectionVariables.set(\"token\",jsonresponse.token)\r",
									"pm.environment.set(\"token\",jsonresponse.token)\r",
									"\r",
									"pm.test(\"Verify user login is successful\"), function(){\r",
									"    pm.expect(jsonresponse.message).contains(\"Login successful\")\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n   \r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login with Wrong creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonresponse = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Verify user cant login with wrong creds\", function(){\r",
									"    pm.expect(jsonresponse.message).contains(\"Password incorrect\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"8596\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User",
			"item": [
				{
					"name": "Create an Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonresponse = pm.response.json();\r",
									"const agentId = jsonresponse.user.id\r",
									"pm.collectionVariables.set(\"agentId\",jsonresponse.user.id)\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash')\r",
									"const prefix = \"0151\"\r",
									"const randomNumber = lodash.random(1000000,9999999)\r",
									"const agentPhoneNumber = prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"agentPhoneNumber\",agentPhoneNumber)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"@#$123$0^\",\r\n  \"phone_number\": \"{{agentPhoneNumber}}\",\r\n  \"nid\": \"65987412\",\r\n  \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash')\r",
									"const prefix = '0171'\r",
									"const randomNumber = lodash.random(1000000,9999999)\r",
									"const customer_1PhoneNumber = prefix+randomNumber\r",
									"pm.collectionVariables.set('customer_1PhoneNumber', customer_1PhoneNumber)\r",
									"pm.environment.set('customer_1PhoneNumber', customer_1PhoneNumber)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonresponse = pm.response.json();\r",
									"const customer_1Id = jsonresponse.user.id\r",
									"pm.collectionVariables.set(\"customer_1Id\",jsonresponse.user.id)\r",
									"pm.environment.set(\"customer_1Id\",jsonresponse.user.id)\r",
									"console.log(\"User ID:\", jsonresponse.user.id);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"12sdkasd\",\r\n  \"phone_number\": \"{{customer_1PhoneNumber}}\",\r\n  \"nid\": \"65987412\",\r\n  \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonresponse = pm.response.json();\r",
									"const customer_2Id = jsonresponse.user.id\r",
									"pm.collectionVariables.set(\"customer_2Id\",jsonresponse.user.id)\r",
									"pm.environment.set(\"customer_2Id\",jsonresponse.user.id)\r",
									"console.log(\"User ID:\", jsonresponse.user.id);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash')\r",
									"const prefix = '0155'\r",
									"const randomNumber = lodash.random(1000000,9999999)\r",
									"const customer_2PhoneNumber = prefix+randomNumber\r",
									"pm.collectionVariables.set('customer_2PhoneNumber', customer_2PhoneNumber)\r",
									"pm.environment.set('customer_2PhoneNumber', customer_2PhoneNumber)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"@345!\",\r\n  \"phone_number\": \"{{customer_2PhoneNumber}}\",\r\n  \"nid\": \"65987890\",\r\n  \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonresponse = pm.response.json();\r",
									"const merchantId = jsonresponse.user.id\r",
									"pm.collectionVariables.set(\"merchantId\",jsonresponse.user.id)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash')\r",
									"const prefix = \"0161\"\r",
									"const randomNumber = lodash.random(1000000,9999999)\r",
									"const merchantPhoneNumber = prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"merchantPhoneNumber\",merchantPhoneNumber)\r",
									"pm.environment.set(\"merchantPhoneNumber\",merchantPhoneNumber)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"@#$123$0^\",\r\n  \"phone_number\": \"{{merchantPhoneNumber}}\",\r\n  \"nid\": \"65987412\",\r\n  \"role\": \"Merchant\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Existing User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user cant created wih existing email\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User already exists\")\r",
									"}\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"Kallie_Corwin17@gmail.com\",\r\n  \"password\": \"@#$123$0^\",\r\n  \"phone_number\": \"{{customerPhoneNumber}}\",\r\n  \"nid\": \"65987412\",\r\n  \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Deposit",
					"item": [
						{
							"name": "Deposit by System to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const agentId = jsonresponse.agentId;\r",
											"pm.collectionVariables.set(\"agentId\",agentId)\r",
											"pm.environment.set(\"agentId\",agentId)\r",
											"\r",
											"\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"System\",// Admin\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 4000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit by Agent to Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentPhoneNumber}}\",// System\r\n  \"to_account\": \"{{customer_1PhoneNumber}}\",\r\n  \"amount\": 1500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit (Failure Scenario)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"\r",
											"pm.test(\"Deposit amount exceeds user's balance validation error\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"Insufficient balance\")\r",
											"}\r",
											"pm.test(\"User cannot deposit to their own account\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"From account and to account cannot be the same\")\r",
											"}\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentPhoneNumber}}\",// \r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 1000000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Money",
					"item": [
						{
							"name": "Send Money Customer To Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer_1PhoneNumber}}\",\r\n  \"to_account\": \"{{customer_2PhoneNumber}}\",\r\n  \"amount\": 1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Money (Failure Scenario)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"\r",
											"pm.test(\"Deposit amount exceeds Customer's balance validation error\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"To Account does not exist\")\r",
											"}\r",
											"pm.test(\"User cannot deposit to invalid account\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"To Account does not exist\")\r",
											"}\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer_1PhoneNumber}}\",\r\n  \"to_account\": \"{{01718429262}}\",\r\n  \"amount\": 20000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Payment from Customer2 to Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer_2PhoneNumber}}\",\r\n  \"to_account\": \"{{merchantPhoneNumber}}\",\r\n  \"amount\": 1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment (Failure Scenario)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"\r",
											"pm.test(\"Customer cannot proceed due to low balance\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"Insufficient balance\")\r",
											"}\r",
											"pm.test(\"Customer cannot make payment to invalid merchantId\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"To Account does not exist\")\r",
											"}\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer_2PhoneNumber}}\",\r\n  \"to_account\": \"{{01611663687}}\",\r\n  \"amount\": 25000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Withdraw",
					"item": [
						{
							"name": "Money Withdraw by Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer_1PhoneNumber}}\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Money Withdraw (Failure Scenario)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonresponse = pm.response.json();\r",
											"const trnx_id = jsonresponse.trnxId\r",
											"pm.collectionVariables.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"pm.environment.set(\"trnx_id\",jsonresponse.trnxId)\r",
											"\r",
											"pm.test(\"Withdraw fails if amount is below 10 or above 10,000\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"Minimum withdraw amount is 10 tk\")\r",
											"}\r",
											"pm.test(\"Customer cannot withdraw money to invalid agentId\"),function(){\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).contains(\"To Account does not exist\")\r",
											"}\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer_1PhoneNumber}}\",\r\n  \"to_account\": \"{{customer_2PhoneNumber}}\",\r\n  \"amount\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transaction List",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Search for Agent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user is found\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User is found\")\r",
									"}\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/search/id/{{agentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"{{agentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify agent not found validation error\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User not found\")\r",
									"}\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search/id/15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Customer ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user is found\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User is found\")\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search/id/{{customerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Customer not found validation error\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User not found\")\r",
									"}\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search/id/15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Merchant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user is found\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User is found\")\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/search/id/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"{{merchantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Merchant Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Merchant not found validation error\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User not found\")\r",
									"}\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search/id/15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by trnx ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/search/{{trnx_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"search",
								"{{trnx_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Balance",
			"item": [
				{
					"name": "Check System Balance",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/system",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"system"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Agent Balance",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01517019552",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01517019552"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Customer Balance",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{customer_2PhoneNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{customer_2PhoneNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Merchant Balance",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{merchantPhoneNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{merchantPhoneNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Balance (Failure Scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to check balance due to invalid or unauthorized request\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User not found\")\r",
									"}\r",
									"\r",
									"pm.test(\"Fail to check balance due to unauthorized request\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"Token invalid\")\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01517019552",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01517019552"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Statement",
			"item": [
				{
					"name": "Get Agent Statement",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{agentPhoneNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{agentPhoneNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer Statement",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{customer_2PhoneNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{customer_2PhoneNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant Statement",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{agentPhoneNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{agentPhoneNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Customer Statement (Failure Scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fail to check statement due to invalid request\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"User not found\")\r",
									"}\r",
									"\r",
									"pm.test(\"Fail to check statement due to unauthorized request\"),function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).contains(\"Token invalid\")\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/01514253556",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"01514253556"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoiYWRtaW5Acm9hZHRvY2FyZWVyLm5ldCIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTc0NTc3MTI2NywiZXhwIjoxNzQ1Nzc0ODY3fQ.fgE4zXpD8EflcGcbGHgXpAKoEG1d0IUHOyEQeWDh3Lw",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "http://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "customerId",
			"value": 75816
		},
		{
			"key": "customerPhoneNumber",
			"value": "01515320894"
		},
		{
			"key": "secretKey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "agentPhoneNumber",
			"value": "01517614573"
		},
		{
			"key": "agentId",
			"value": 75817
		},
		{
			"key": "customer_1PhoneNumber",
			"value": ""
		},
		{
			"key": "customer_2PhoneNumber",
			"value": ""
		},
		{
			"key": "merchantPhoneNumber",
			"value": ""
		},
		{
			"key": "merchantId",
			"value": ""
		},
		{
			"key": "customer_1Id",
			"value": ""
		},
		{
			"key": "customer_2Id",
			"value": ""
		},
		{
			"key": "deposit",
			"value": "",
			"type": "string"
		},
		{
			"key": "customer1_PhoneNumber",
			"value": ""
		},
		{
			"key": "customer2_PhoneNumber",
			"value": ""
		},
		{
			"key": "customer1_Id",
			"value": ""
		},
		{
			"key": "trnx_id",
			"value": ""
		},
		{
			"key": "wrong_agent",
			"value": "",
			"type": "default"
		}
	]
}